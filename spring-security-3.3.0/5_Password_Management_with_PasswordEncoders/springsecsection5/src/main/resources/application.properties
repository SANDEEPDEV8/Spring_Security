spring.application.name=${SPRING_APP_NAME:eazybankbackend}
logging.level.org.springframework.security=${SPRING_SECURITY_LOG_LEVEL:TRACE}

spring.datasource.url=jdbc:mysql://${DATABASE_HOST:localhost}:${DATABASE_PORT:3306}/${DATABASE_NAME:eazybank}
spring.datasource.username=${DATABASE_USERNAME:root}
spring.datasource.password=${DATABASE_PASSWORD:root}
spring.jpa.show-sql=${JPA_SHOW_SQL:true}
spring.jpa.properties.hibernate.format_sql=${HIBERNATE_FORMAT_SQL:true}

logging.pattern.console = ${LOGPATTERN_CONSOLE:%green(%d{HH:mm:ss.SSS}) %blue(%-5level) %red([%thread]) %yellow(%logger{15}) - %msg%n}

# ENCODING
# -e encode (default) , -d is decode
# > openssl base64 -in plain.txt -out encode.txt
# > openssl base64 -d -in encode.txt -out plain.txt

# SYMMETRIC ENCRYPTION
# use only in single application or data under rest like s3. because if key compramized then gone
# > openssl enc -aes-256-cbc -pass pass:12345 -pbkdf2 -in plain.txt -out encrypt.txt -base64

# -aes-256-cbc >> algorithm
# -pass pass:12345 >> 12345 is secret key for encryption process. need it for decryption
# -pbkdf2 >> password based key derivation function. makes encryption more strong because it provides random salt to derive another internal secret key
# -in plain.txt >> input file
# -out encrypt.txt >> output file . not readable chars
# -base64 >> output in base64 to make it more readable .  sjfbjkj3b4jb43kj34tb3kj=

# > openssl enc -aes-256-cbc -base64 -pass pass:12345 -pbkdf2 -in encrypt.txt -out decrypt.txt


# ASYMMETRIC ENCRYPTION
# public key for encrypt and private key for decrypt. ideal for data in transit

# HASHING > best way for password security
    # convert password to hash/digest value using hash function
    # hash value length is same for input with 10 chars or 100000000 chars
    # its one way. irriversible
    # salt ($2a$10$IQq.IbjoUBKkhvuoUJBBLJu) +password = hash value
    #    2a is bcrypt version , 10 is strength (max 31),  next salt value

    # >echo -n "password" | openssl dgst -sha256
    # echo -n "password" | openssl dgst -sha256 -binary | base64

    # https://www.oracle.com/java/technologies/downloads/ this website has hava file and sha256 hash
    # to ensure no one tampered the file, verify with sha256 hash
    # >openssl dgst -sha256 jdk-22_macos-x64_bin.dmg
    # check the generated hash value with hash value in website, so it is same if not tampered
    # cons: brutforce attack, dictionary or rainbow table attack
    # hashing is super fast, so easy to bruteforce attack
    # use intentionally slowwer algos like bcrypt or scrypt or argon2id to avoid brutforce attack. this also need more cpu and memory

    # source code: PasswordEncoder , BCryptPasswordEncoder (default), DaoAuthenticationProvider


# WHEN TO USE WHAT
# symmetic encryption for data at rest
# asymmetric encryption for data in transit
# hashing for password
# base64 when you cant deal with binary data